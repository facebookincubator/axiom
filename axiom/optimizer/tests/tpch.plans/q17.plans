numWorkers: 1
numDrivers: 1

Query Graph:

dt1: avg_yearly
  output:
    avg_yearly := divide(dt1.sum, 7)
  tables: t2, t3, dt4
  joins:
    t3 LEFT dt4 ON t3.p_partkey = dt4.__gk6
    t2 INNER t3 ON t2.l_partkey = t3.p_partkey
  syntactic join order: 17, 30, 34
  aggregates: sum(t2.l_extendedprice) AS sum
  filter: lt(t2.l_quantity, dt4.expr)

t2: l_partkey, l_quantity, l_extendedprice
  table: lineitem

t3: p_partkey, p_brand, p_container
  table: part
  single-column filters: eq(t3.p_brand, "Brand#23") and eq(t3.p_container, "MED BOX")

dt4: __gk6, expr
  output:
    __gk6 := t5.l_partkey
    expr := multiply(dt4.avg, 0.2)
  tables: t5
  aggregates: avg(t5.l_quantity) AS avg
  grouping keys: t5.l_partkey

t5: l_partkey, l_quantity
  table: lineitem


Optimized plan (oneline):

(lineitem RIGHT (lineitem INNER part))

Optimized plan:

Project -> dt1.avg_yearly
    dt1.avg_yearly := divide(dt1.sum, 7)
  Aggregation -> dt1.sum
      dt1.sum := sum(t2.l_extendedprice)
    Filter -> t2.l_quantity, t2.l_extendedprice, dt4.expr
        lt(t2.l_quantity, dt4.expr)
      Join RIGHT Hash -> t2.l_quantity, t2.l_extendedprice, dt4.expr
          dt4.__gk6 = t3.p_partkey
        Project -> dt4.__gk6, dt4.expr
            dt4.__gk6 := t5.l_partkey
            dt4.expr := multiply(dt4.avg, 0.2)
          Aggregation (t5.l_partkey) -> t5.l_partkey, dt4.avg
              dt4.avg := avg(t5.l_quantity)
            TableScan -> t5.l_partkey, t5.l_quantity
              table: lineitem
        HashBuild -> t2.l_quantity, t2.l_extendedprice, t3.p_partkey
          Join INNER Hash -> t2.l_quantity, t2.l_extendedprice, t3.p_partkey
              t2.l_partkey = t3.p_partkey
            TableScan -> t2.l_partkey, t2.l_quantity, t2.l_extendedprice
              table: lineitem
            HashBuild -> t3.p_partkey
              TableScan -> t3.p_partkey
                table: part
                single-column filters: eq(t3.p_brand, "Brand#23") and eq(t3.p_container, "MED BOX")


Executable Velox plan:

Fragment 0:  numWorkers=0:
-- Project[9][expressions: (avg_yearly:DOUBLE, divide("sum",7))] -> avg_yearly:DOUBLE
  -- Aggregation[8][SINGLE sum := sum("l_extendedprice")] -> sum:DOUBLE
    -- Filter[0][expression: lt("l_quantity","expr")] -> l_quantity:DOUBLE, l_extendedprice:DOUBLE, expr:DOUBLE
      -- HashJoin[7][RIGHT dt4.__gk6=p_partkey] -> l_quantity:DOUBLE, l_extendedprice:DOUBLE, expr:DOUBLE
        -- Project[3][expressions: (dt4.__gk6:BIGINT, "l_partkey_1"), (expr:DOUBLE, multiply("avg",0.2))] -> "dt4.__gk6":BIGINT, expr:DOUBLE
          -- Aggregation[2][SINGLE [l_partkey_1] avg := avg("l_quantity_4")] -> l_partkey_1:BIGINT, avg:DOUBLE
            -- TableScan[1][table: lineitem, data columns: ROW<l_orderkey:BIGINT,l_partkey:BIGINT,l_suppkey:BIGINT,l_linenumber:INTEGER,l_quantity:DOUBLE,l_extendedprice:DOUBLE,l_discount:DOUBLE,l_tax:DOUBLE,l_returnflag:VARCHAR,l_linestatus:VARCHAR,l_shipdate:DATE,l_commitdate:DATE,l_receiptdate:DATE,l_shipinstruct:VARCHAR,l_shipmode:VARCHAR,l_comment:VARCHAR>] -> l_partkey_1:BIGINT, l_quantity_4:DOUBLE
        -- HashJoin[6][INNER l_partkey=p_partkey] -> l_quantity:DOUBLE, l_extendedprice:DOUBLE, p_partkey:BIGINT
          -- TableScan[4][table: lineitem, data columns: ROW<l_orderkey:BIGINT,l_partkey:BIGINT,l_suppkey:BIGINT,l_linenumber:INTEGER,l_quantity:DOUBLE,l_extendedprice:DOUBLE,l_discount:DOUBLE,l_tax:DOUBLE,l_returnflag:VARCHAR,l_linestatus:VARCHAR,l_shipdate:DATE,l_commitdate:DATE,l_receiptdate:DATE,l_shipinstruct:VARCHAR,l_shipmode:VARCHAR,l_comment:VARCHAR>] -> l_partkey:BIGINT, l_quantity:DOUBLE, l_extendedprice:DOUBLE
          -- TableScan[5][table: part, range filters: [(p_brand, Filter(BytesValues, deterministic, null not allowed)), (p_container, Filter(BytesValues, deterministic, null not allowed))], data columns: ROW<p_partkey:BIGINT,p_name:VARCHAR,p_mfgr:VARCHAR,p_brand:VARCHAR,p_type:VARCHAR,p_size:INTEGER,p_container:VARCHAR,p_retailprice:DOUBLE,p_comment:VARCHAR>] -> p_partkey:BIGINT

___END___
