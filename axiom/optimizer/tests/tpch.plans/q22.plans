numWorkers: 1
numDrivers: 1

Query Graph:

dt1: cntrycode, numcust, totacctbal
  output:
    cntrycode := dt1.cntrycode
    numcust := dt1.numcust
    totacctbal := dt1.totacctbal
  tables: t2, dt3, dt5
  joins:
    t2 SEMI dt5 ON t2.c_custkey = dt5.o_custkey
  syntactic join order: 9, 13, 35
  aggregates: count() AS numcust, sum(t2.c_acctbal) AS totacctbal
  grouping keys: substr(t2.c_phone, 1, 2)
  filter: gt(t2.c_acctbal, dt3.avg) and not(dt1.__mark0)
  orderBy: dt1.cntrycode ASC NULLS LAST

t2: c_custkey, c_phone, c_acctbal
  table: customer
  single-column filters: __in(substr(t2.c_phone, 1, 2), "13", "31", "23", "29", "30", "18", "17")

dt3: avg
  output:
    avg := dt3.avg
  tables: t4
  aggregates: avg(t4.c_acctbal) AS avg

t4: c_phone, c_acctbal
  table: customer
  single-column filters: gt(t4.c_acctbal, 0) and __in(substr(t4.c_phone, 1, 2), "13", "31", "23", "29", "30", "18", "17")

dt5: o_orderkey, o_custkey, o_orderstatus, o_totalprice, o_orderdate, o_orderpriority, o_clerk, o_shippriority, o_comment
  output:
    o_orderkey := t6.o_orderkey
    o_custkey := t6.o_custkey
    o_orderstatus := t6.o_orderstatus
    o_totalprice := t6.o_totalprice
    o_orderdate := t6.o_orderdate
    o_orderpriority := t6.o_orderpriority
    o_clerk := t6.o_clerk
    o_shippriority := t6.o_shippriority
    o_comment := t6.o_comment
  tables: t6

t6: o_orderkey, o_custkey, o_orderstatus, o_totalprice, o_orderdate, o_orderpriority, o_clerk, o_shippriority, o_comment
  table: orders


Optimized plan (oneline):

((customer INNER customer) LEFT SEMI (PROJECT) orders)

Optimized plan:

Project (redundant) -> dt1.cntrycode, dt1.numcust, dt1.totacctbal
    dt1.cntrycode := dt1.cntrycode
    dt1.numcust := dt1.numcust
    dt1.totacctbal := dt1.totacctbal
  OrderBy -> dt1.cntrycode, dt1.numcust, dt1.totacctbal
    Aggregation (dt1.__p67) -> dt1.cntrycode, dt1.numcust, dt1.totacctbal
        dt1.numcust := count()
        dt1.totacctbal := sum(t2.c_acctbal)
      Project -> dt1.__p67, t2.c_acctbal
          dt1.__p67 := substr(t2.c_phone, 1, 2)
          t2.c_acctbal := t2.c_acctbal
        Filter -> t2.c_phone, t2.c_acctbal, dt1.__mark0
            not(dt1.__mark0)
          Join LEFT SEMI (PROJECT) Hash -> t2.c_phone, t2.c_acctbal, dt1.__mark0
              t2.c_custkey = dt5.o_custkey
            Filter -> t2.c_custkey, t2.c_phone, t2.c_acctbal, dt3.avg
                gt(t2.c_acctbal, dt3.avg)
              Join INNER Cross -> t2.c_custkey, t2.c_phone, t2.c_acctbal, dt3.avg
                TableScan -> t2.c_custkey, t2.c_phone, t2.c_acctbal
                  table: customer
                  single-column filters: __in(substr(t2.c_phone, 1, 2), "13", "31", "23", "29", "30", "18", "17")
                Project (redundant) -> dt3.avg
                    dt3.avg := dt3.avg
                  Aggregation -> dt3.avg
                      dt3.avg := avg(t4.c_acctbal)
                    TableScan -> t4.c_acctbal
                      table: customer
                      single-column filters: gt(t4.c_acctbal, 0) and __in(substr(t4.c_phone, 1, 2), "13", "31", "23", "29", "30", "18", "17")
            HashBuild -> dt5.o_custkey
              Project (redundant) -> dt5.o_custkey
                  dt5.o_custkey := t6.o_custkey
                TableScan -> t6.o_custkey
                  table: orders


Executable Velox plan:

Fragment 0:  numWorkers=0:
-- OrderBy[10][cntrycode ASC NULLS LAST] -> cntrycode:VARCHAR, numcust:BIGINT, totacctbal:DOUBLE
  -- Aggregation[9][SINGLE [cntrycode] numcust := count(), totacctbal := sum("c_acctbal")] -> cntrycode:VARCHAR, numcust:BIGINT, totacctbal:DOUBLE
    -- Project[8][expressions: (cntrycode:VARCHAR, substr("c_phone",1,2)), (c_acctbal:DOUBLE, "c_acctbal")] -> cntrycode:VARCHAR, c_acctbal:DOUBLE
      -- Filter[0][expression: not("dt1.__mark0")] -> c_phone:VARCHAR, c_acctbal:DOUBLE, "dt1.__mark0":BOOLEAN
        -- HashJoin[7][LEFT SEMI (PROJECT) c_custkey=o_custkey] -> c_phone:VARCHAR, c_acctbal:DOUBLE, "dt1.__mark0":BOOLEAN
          -- Filter[1][expression: gt("c_acctbal","avg")] -> c_custkey:BIGINT, c_phone:VARCHAR, c_acctbal:DOUBLE, avg:DOUBLE
            -- NestedLoopJoin[5][INNER] -> c_custkey:BIGINT, c_phone:VARCHAR, c_acctbal:DOUBLE, avg:DOUBLE
              -- TableScan[2][table: customer, remaining filter: (in(substr("c_phone",1,2),{13, 31, 23, 29, 30, ...2 more})), data columns: ROW<c_custkey:BIGINT,c_name:VARCHAR,c_address:VARCHAR,c_nationkey:BIGINT,c_phone:VARCHAR,c_acctbal:DOUBLE,c_mktsegment:VARCHAR,c_comment:VARCHAR>] -> c_custkey:BIGINT, c_phone:VARCHAR, c_acctbal:DOUBLE
              -- Aggregation[4][SINGLE avg := avg("c_acctbal_5")] -> avg:DOUBLE
                -- TableScan[3][table: customer, range filters: [(c_acctbal, DoubleRange: (0.000000, nan] no nulls)], remaining filter: (in(substr("c_phone",1,2),{13, 31, 23, 29, 30, ...2 more})), data columns: ROW<c_custkey:BIGINT,c_name:VARCHAR,c_address:VARCHAR,c_nationkey:BIGINT,c_phone:VARCHAR,c_acctbal:DOUBLE,c_mktsegment:VARCHAR,c_comment:VARCHAR>] -> c_acctbal_5:DOUBLE
          -- TableScan[6][table: orders, data columns: ROW<o_orderkey:BIGINT,o_custkey:BIGINT,o_orderstatus:VARCHAR,o_totalprice:DOUBLE,o_orderdate:DATE,o_orderpriority:VARCHAR,o_clerk:VARCHAR,o_shippriority:INTEGER,o_comment:VARCHAR>] -> o_custkey:BIGINT

___END___
